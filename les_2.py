"""
1. Создать список и заполнить его элементами различных типов данных. Реализовать скрипт проверки типа данных каждого
элемента. Использовать функцию type() для проверки типа. Элементы списка можно не запрашивать у пользователя,
а указать явно, в программе.
"""

def task_1():
    my_list = ['100', 'cто', 351, 2.5, True, None]
    for i in my_list:
        print(type(i))

#task_1()

"""
2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются элементы с индексами 
0 и 1, 2 и 3 и т. д. При нечётном количестве элементов последний сохранить на своём месте. Для заполнения списка 
элементов нужно использовать функцию input().
"""

def task_2(amount):
    some_list = []
    for i in range(amount):
        element = input(f'Введите элемент [{i + 1}]: ')
        some_list.append(element)
    print(some_list)
    if amount % 2 > 0:
        amount = amount - 1
    for i in range(0, amount, 2):
        element_temp = some_list[i + 1]
        some_list[i + 1] = some_list[i]
        some_list[i] = element_temp
    print(some_list)

#task_2(int(input('Введите колличество элементов: ')))

"""
3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года относится месяц 
(зима, весна, лето, осень). Напишите решения через list и dict.
"""

def task_3(month_num):
    seasons = dict(key_1='Зима', key_2='Весна', key_3='Лето', key_4='Осень')
    seasons_list = ['key_1', 'key_1', 'key_2', 'key_2', 'key_2', 'key_3', 'key_3', 'key_3',
                    'key_4', 'key_4', 'key_4', 'key_1']
    print(seasons.get(seasons_list[month_num - 1]))

#task_3(int(input('Введите номер месяца: ')))

"""
4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое слово с новой строки. 
Строки нужно пронумеровать. Если слово длинное, выводить только первые 10 букв в слове.
"""

def task_4(user_string):
    str_list = user_string.split()
    count = 1
    for el in str_list:
        print(f'{el[:10]} - строка №{count}')
        count += 1

#task_4(input())

"""
5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает. 
У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, 
то новый элемент с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].
"""

def task_5(number):
    my_list = [7, 5, 3, 3, 2]
    my_list.append(number)
    my_list.sort(reverse=True)
    print(my_list)
task_5(int(input('Введите новый элемент рейтинга: ')))