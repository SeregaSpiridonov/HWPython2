from functools import reduce

"""
Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для его формирования используйте генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
"""


def task_2(some_list):
    new_list = [some_list[index] for index in range(1, len(some_list)) if some_list[index] > some_list[index - 1]]
    print(new_list)


task_2([300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55])

"""
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Решите задание в одну строку.
Подсказка: используйте функцию range() и генератор.
"""


def task_3():
    new_list = [el for el in range(20, 241) if el % 20 == 0 or el % 21 == 0]
    print(new_list)


task_3()

"""
Представлен список чисел. Определите элементы списка, не имеющие повторений. Сформируйте итоговый массив чисел, 
соответствующих требованию. Элементы выведите в порядке их следования в исходном списке. Для выполнения задания 
обязательно используйте генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""


def task_4(some_list):
    new_list = [el for el in some_list if some_list.count(el) == 1]
    print(new_list)


task_4([2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11])

"""
Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти чётные 
числа от 100 до 1000 (включая границы). Нужно получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
"""


def mult_number(first_el, second_el):
    return first_el * second_el


def task_5():
    orig_list = [el for el in range(100, 1001, 2)]
    print(reduce(mult_number, orig_list))


task_5()

"""
Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. Функция вызывается следующим образом: 
for el in fact(n). Она отвечает за получение факториала числа. В цикле нужно выводить только 
первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. 
Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""


def fact(n):
    fact_n = 1
    for num in range(1, n + 1):
        fact_n *= num
        yield fact_n


def task_7(n):
    for el in fact(n):
        print(el)


task_7(4)
